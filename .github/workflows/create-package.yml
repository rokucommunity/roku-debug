name: create-package
on:
  pull_request:
    types: [labeled, unlabeled, synchronize]
jobs:
  create-package:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'create-package')
    steps:
      # # Get a bot token so the bot's name shows up on all our actions
      # - name: Get Token From roku-ci-token Application
      #   uses: tibdex/github-app-token@v1
      #   id: generate-token
      #   with:
      #     app_id: ${{ secrets.BOT_APP_ID }}
      #     private_key: ${{ secrets.BOT_PRIVATE_KEY }}
      # - name: Set New GitHub Token
      #   run: echo "TOKEN=${{ steps.generate-token.outputs.token }}" >> $GITHUB_ENV

      # - uses: actions/checkout@master
      # - uses: actions/setup-node@master
      #   with:
      #     node-version: "14.19.0"
      # - run: npm ci

      # - name: Compute variables
      #   run: |
      #     CURRENT_VERSION=$(grep -o '\"version\": *\"[^\"]*\"' package.json | awk -F'\"' '{print $4}')

      #     BUILD_VERSION="$CURRENT_VERSION-alpha.$(date +%Y%m%d%H%M%S)"
      #     echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV

      #     NPM_PACKAGE_NAME=$(grep -o '\"name\": *\"[^\"]*\"' package.json | awk -F'\"' '{print $4}')

      #     ARTIFACT_NAME=$(echo "$NPM_PACKAGE_NAME-$BUILD_VERSION.tgz" | tr '/' '-')
      #     echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

      #     ARTIFACT_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      #     echo "ARTIFACT_URL=$ARTIFACT_URL" >> $GITHUB_ENV

      # - name: Update version and run pre-release scripts
      #   run: npm version "$BUILD_VERSION" --no-git-tag-version

      # - run: npm pack

      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ env.ARTIFACT_NAME }}
      #     path: "*.tgz"

      - name: Fetch build artifact
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              job_id: 18687088626,
            })
            .then((response) => {
              const artifacts = response.data.artifacts;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                //body: "Hey there! I just built a new temporary npm package based on ${{ github.event.pull_request.head.sha }}. You can download it from [this page](${{ env.ARTIFACT_URL }}) and then install it by running the following command: \n```bash\nnpm install ${{ env.ARTIFACT_NAME }}\n```"
                body: JSON.stringify(artifacts)
              });

            })
            .catch((error) => {
              console.error('Error fetching data:', error);
            });
